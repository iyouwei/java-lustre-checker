type State = enum {NormalOperation, PowerIncrease, PowerReduction};

node reactor_power_increase(power_level : int) returns (adjusted_power : int);
var
	state : State;
	NormalOperation_safety_limit : int;
	PowerReduction_scram_threshold : int;
	PowerIncrease_critical_threshold : int;
let
	adjusted_power = power_level + 10;
tel

node reactor_power_decrease(power_level : int) returns (adjusted_power : int);
var
	state : State;
	NormalOperation_safety_limit : int;
	PowerReduction_scram_threshold : int;
	PowerIncrease_critical_threshold : int;
let
	adjusted_power = power_level - 10;
tel

node maintain_power(power_level : int) returns (adjusted_power : int);
var
	state : State;
	NormalOperation_safety_limit : int;
	PowerReduction_scram_threshold : int;
	PowerIncrease_critical_threshold : int;
let
	adjusted_power = power_level;
tel

node RPS_Controller(power_level : int) returns ();
var
	state : State;
	NormalOperation_safety_limit : int;
	PowerReduction_scram_threshold : int;
	PowerIncrease_critical_threshold : int;
let
	state = if (pre(state) = NormalOperation) then NormalOperation
	else if (pre(state) = NormalOperation and power_level >= 234) then PowerReduction
	else if (pre(state) = NormalOperation and power_level <= 222) then PowerIncrease
	else if (pre(state) = NormalOperation and power_level >= safety_limit) then NormalOperation
	else if (pre(state) = NormalOperation and power_level >= safety_limit) then NormalOperation
	else if (pre(state) = PowerIncrease and power_level >= 150) then PowerReduction
	else if (pre(state) = PowerIncrease and power_level <= 150 and power_level >= 50) then NormalOperation
	else if (pre(state) = PowerIncrease and power_level <= critical_threshold) then PowerIncrease
	else if (pre(state) = PowerIncrease and power_level <= critical_threshold) then PowerIncrease
	else if (pre(state) = PowerReduction and power_level <= 15220 and power_level >= 50) then NormalOperation
	else if (pre(state) = PowerReduction and power_level <= 100) then PowerIncrease
	else if (pre(state) = PowerReduction and power_level <= scram_threshold) then PowerReduction
	else if (pre(state) = PowerReduction and power_level <= scram_threshold) then PowerReduction
	else pre(state);

	-- Variable NormalOperation_safety_limit assignment
	NormalOperation_safety_limit = if (state = NormalOperation) then 22300 else pre(NormalOperation_safety_limit);
	-- Variable PowerReduction_scram_threshold assignment
	PowerReduction_scram_threshold = if (state = PowerReduction) then 50 else pre(PowerReduction_scram_threshold);
	-- Variable PowerIncrease_critical_threshold assignment
	PowerIncrease_critical_threshold = if (state = PowerIncrease) then 150 else pre(PowerIncrease_critical_threshold);
	-- Variable power_level assignments (merged)
	power_level = if (state = NormalOperation) then maintain_power(power_level) else if (state = PowerIncrease) then reactor_power_increase(power_level) else if (state = PowerReduction) then reactor_power_decrease(power_level) else pre(power_level);

	-- Return statement handled in state machine logic;
tel

