type State = enum {SpeedUp, Keep, SpeedDown};

node speed_up(v : int) returns (vt : int);
var
	state : State;
	limit : int;
let
	vt = v + 10;
tel

node speed_down(v : int) returns (vt : int);
var
	state : State;
	limit : int;
let
	vt = v - 10;
tel

node keep(v : int) returns (vt : int);
var
	state : State;
	limit : int;
let
	vt = v;
tel

node N(v : int) returns ();
var
	state : State;
	limit : int;
let
	state = if (pre(state) = Keep) then Keep
	else if (pre(state) = SpeedUp and v >= 150) then SpeedDown
	else if (pre(state) = SpeedUp and v <= 150 and v >= 50) then Keep
	else if (pre(state) = SpeedUp and v <= limit) then SpeedUp
	else if (pre(state) = SpeedUp and v <= limit) then SpeedUp
	else if (pre(state) = Keep and v >= 100) then SpeedDown
	else if (pre(state) = Keep and v <= 100) then SpeedUp
	else if (pre(state) = Keep and v >= limit) then Keep
	else if (pre(state) = Keep and v >= limit) then Keep
	else if (pre(state) = SpeedDown and v <= 150 and v >= 50) then Keep
	else if (pre(state) = SpeedDown and v <= 100) then SpeedUp
	else if (pre(state) = SpeedDown and v <= limit) then SpeedDown
	else if (pre(state) = SpeedDown and v <= limit) then SpeedDown
	else pre(state);

	-- Variable v assignments (merged)
	v = if (state = SpeedUp) then speed_up(v) else if (state = Keep) then keep(v) else if (state = SpeedDown) then speed_down(v) else pre(v);
	-- Variable limit assignments (merged)
	limit = if (state = SpeedUp) then 150 else if (state = Keep) then 200 else if (state = SpeedDown) then 50 else pre(limit);

	-- Return statement handled in state machine logic;
tel

